import org.apache.poi.xwpf.extractor.XWPFWordExtractor;
import org.apache.poi.xwpf.usermodel.XWPFDocument;

import java.awt.Color;
import java.io.*;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.Formatter;
import java.util.Random;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.zip.ZipOutputStream;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
public class Verificating extends javax.swing.JFrame {

    private static final String INPUT_ZIP_FILE = "C:\\Users\\w\\IdeaProjects\\School\\Cryptography\\Signatures\\GOST for El-Gamal Signature\\Verificating\\mrs.zip";
    private static final String OUTPUT_FOLDER = "C:\\Users\\w\\IdeaProjects\\School\\Cryptography\\Signatures\\GOST for El-Gamal Signature\\Verificating";
    public static BigInteger InverseElement(BigInteger k, BigInteger p)
    {
        if(k.gcd(p).compareTo(BigInteger.ONE)==0)
        {
            BigInteger ret=BigInteger.ZERO;
            BigInteger a,b,a1,b1,q;
            a=k;//a=7
            b=p;//b=11
            a1=BigInteger.ZERO;//a1=0
            b1=BigInteger.ONE;//b1=1
            if(b.compareTo(a)>0)//if b>a
            {
                BigInteger d=a;// d=a
                a=b;// a=b -> a=11
                b=d;//b=d  -> b=7
            }
            BigInteger main=a;
            while(a.compareTo(BigInteger.ZERO)!=0||b.compareTo(BigInteger.ZERO)!=0)// while a and b !=0
            {
                q=a.divide(b);//q=11 divide 7 = 1 -> q=1// q=4 divide 3=1 -> q=1
                //  System.out.println("q="+q);
                a=a.mod(b);//a=11 mod 7 =4 ->        a=4// a=4 mod 3=1 -> a=1
                // System.out.println("a="+a);
                if(a.compareTo(BigInteger.ZERO)==0)
                {
                    if(b1.compareTo(BigInteger.ZERO)<0)
                    {
                        b1=b1.mod(main);
                        ret=b1;
                    }
                    ret=b1;
                    //System.out.println(b1);
                    break;
                }
                a1=a1.subtract(q.multiply(b1));//a1=0-1*1=-1 -> a1=-1//a1=-1-1*2=-3
                // System.out.println("a1="+a1);
                q=b.divide(a);//q=7 divide 4 = 1//q=3 divide 1=3
                //  System.out.println("q="+q);
                b=b.mod(a);//b=7 mod 4= 3//b=3 mod 1=0
                // System.out.println("b="+b);
                b1=b1.subtract(q.multiply(a1));//b1=1-1*(-1)=2 -> b1=2//
                //System.out.println("b1="+b1);
                if(b.compareTo(BigInteger.ZERO)==0)
                {
                    if(a1.compareTo(BigInteger.ZERO)<0)
                    {
                        a1=a1.mod(main);
                        ret=a1;
                    }
                    ret=a1;
                    //System.out.println(a1);
                    break;
                }
            }
            return ret;
        }
        else
        {
            return null;
        }

    }
    public static BigInteger random()
    {
        Random b = new SecureRandom();
        BigInteger a = BigInteger.probablePrime(2048,b);
        return a;
    }
    public static String SHA256(String a)throws NoSuchAlgorithmException //METHOD OF
    {
        byte[]input=a.getBytes();
        MessageDigest SHA256=MessageDigest.getInstance("SHA-256");
        SHA256.update(input);
        byte[] digest=SHA256.digest() ;
        StringBuffer hexDigest=new StringBuffer();
        for(int i=0;i<digest.length;i++)
        {
            hexDigest.append(Integer.toString((digest[i]&0xff)+0x100,16).substring(1));


        }
        String b=hexDigest.toString();
        return b;
    }
    JFileChooser openFileChooser;
    JFileChooser saveFileChooser;


    public Verificating() {
        initComponents();

        openFileChooser=new JFileChooser();
        openFileChooser.setFileFilter(new FileNameExtensionFilter("ZIP files","zip"));

        saveFileChooser=new JFileChooser();
        saveFileChooser.setFileFilter(new FileNameExtensionFilter("ZIP files","zip"));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        readButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        writeButton = new javax.swing.JButton();
        messageLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        readButton.setLabel("Verificate ...");
        readButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    readButtonActionPerformed(evt);
                }catch(NoSuchAlgorithmException e)
                {

                }
            }
        });

        textArea.setColumns(20);
        textArea.setRows(5);
        jScrollPane1.setViewportView(textArea);

        writeButton.setText("Write to File...");
        writeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                writeButtonActionPerformed(evt);
            }
        });

        messageLabel.setBackground(new java.awt.Color(153, 153, 153));
        messageLabel.setOpaque(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(readButton))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(19, 19, 19)
                                                .addComponent(messageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(22, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jScrollPane1)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(writeButton)))
                                .addGap(43, 43, 43))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(readButton)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(writeButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(messageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>

    private void readButtonActionPerformed(java.awt.event.ActionEvent evt)throws NoSuchAlgorithmException {//method for selecting a signature
        // TODO add your handling code here:
        int returnValue=openFileChooser.showOpenDialog(this);
        if(returnValue==JFileChooser.APPROVE_OPTION)
        {
            try
            {
                //open the file
                /*File inputFile=openFileChooser.getSelectedFile();
                FileReader inputReader = new FileReader(inputFile);
                BufferedReader inputBR=new BufferedReader(inputReader);
                //read the contents
                String line=inputBR.readLine();//null when at the end of a file
                textArea.setText("");
                while(line!=null)
                {
                    textArea.append(line+"\n");
                    line= inputBR.readLine();
                }*/
                BigInteger p=new BigInteger("22447072865393472692006793475380077783246646951332628480076162978739967760505240514595048494451676165364978771086841379170260388092142401398066292497601681128577979645169477600035433565630062761348711783768490243675310093632776676289031153847415278625675014283691810501797109754612231745160664099519400956174035003690866818522308530532264070536025268940898250124626110833624472362461317256136065198411737714337761464991350936230064116741471236874192557746857986375626495393516141328485752429316369597637976437142115869464179895410975582222084215407560557041370151766183367150358148675463458057954581677198982032338367");
                BigInteger q=new BigInteger("11223536432696736346003396737690038891623323475666314240038081489369983880252620257297524247225838082682489385543420689585130194046071200699033146248800840564288989822584738800017716782815031380674355891884245121837655046816388338144515576923707639312837507141845905250898554877306115872580332049759700478087017501845433409261154265266132035268012634470449125062313055416812236181230658628068032599205868857168880732495675468115032058370735618437096278873428993187813247696758070664242876214658184798818988218571057934732089947705487791111042107703780278520685075883091683575179074337731729028977290838599491016169183");
                BigInteger y=new BigInteger("20029416035480938902981684884434922553174623943449257184850285692886388839500202149673250454142553444850414319628826455952811469225473801307920096741957849232330484172230464252898653683974484888282614852046467750264473467967744880414152989103445386044898655038554422951619479849740197018085882242375932263680000724457320601629962248525396490402722296187235775443024113042801660486158188947547726167457291178947857073960113910662581537695593413883205547455085739644550369626406327502716559103923722908876655108565362970693895999847075904557971016700967611965149252312809188226729828654244948657552957517709060253596102");
                BigInteger x=new BigInteger("9977200918824036479438929379720205094149964884188445619462078735156270479063260564729426780294239293996894614297819");
                BigInteger a=new BigInteger("81856755457110211584763405475314283238642221604096931560051613034484120657539");
                //initializing all the parameters that were found before
                //String m;
                //m=textArea.getText();
                //m=m.substring(0,m.length()-1);
                //char[]ch=m.toCharArray();
                //int a=ch.length;
                //for(int i=0;i<ch.length;i++)
                //ch[a]=ch[a-1];
                //int c=ch.length;
                //String hm=SHA256(m);
                //BigInteger hmp=new BigInteger(hm,16);
                Random aa=new SecureRandom();
                Random rand=new Random();
                //initializing random parameters
                //System.out.println(hm);

                try
                {
                    Verificating unZip = new Verificating();
                    unZip.unZipIt(INPUT_ZIP_FILE,OUTPUT_FOLDER);
                    FileReader filem=new FileReader("C:\\Users\\w\\IdeaProjects\\School\\Cryptography\\Signatures\\GOST for El-Gamal Signature\\Verificating\\m.doc");
                    BufferedReader readerm=new BufferedReader(filem);
                    //opening .zip file and selecting m file
                    String m;//7ee27c11ab6f9e2cba33e528f1ca9a930ff6534b6de8239abbe47987a9c9e53f//initializing m for message, and after - hashing
                    String linem=readerm.readLine();
                    textArea.setText("");
                    while(linem!=null)
                    {
                        textArea.append(linem+"\n");
                        linem=readerm.readLine();
                    }
                    //textArea takes value of m.txt
                    m=textArea.getText();//string m takes textArea's value
                    //m=m.substring(0,m.length()-1);//cutting last symbol, because text file fives last symbol as empty
                    /*XWPFDocument document = new XWPFDocument(new FileInputStream("C:\\Users\\w\\IdeaProjects\\School\\Cryptography\\GOST for El-Gamal Signature\\Verificating\\m.doc"));
                    XWPFWordExtractor extract=new XWPFWordExtractor(document);
                    String m=extract.getText();*/
                    System.out.println(m);
                    System.out.println(SHA256(m));
                    String h=SHA256(m);//initializing h as SHA-256 hash of the message
                    BigInteger hmp=new BigInteger(h,16);//emporting hexadecimal hash to decimal
                    filem.close();//closing text file
                    readerm.close();//closing reading text file
                    FileReader filer=new FileReader("C:\\Users\\w\\IdeaProjects\\School\\Cryptography\\Signatures\\GOST for El-Gamal Signature\\Verificating\\r.txt");
                    BufferedReader readerr=new BufferedReader(filer);
                    //opening .zip file and selecting r file
                    String r;//initializing r
                    String liner=readerr.readLine();
                    textArea.setText("");
                    while(liner!=null)
                    {
                        textArea.append(liner+"\n");
                        liner=readerr.readLine();
                    }
                    r=textArea.getText();//string m takes textArea's value
                    r=r.substring(0,r.length()-1);//cutting last symbol, because text file fives last symbol as empty
                    System.out.println(r);
                    BigInteger R=new BigInteger(r);//giving string value of r to BigInteger R
                    filer.close();//closing text file
                    readerr.close();//closing reading text file


                    //System.out.println(SHA256(m));
                    FileReader files=new FileReader("C:\\Users\\w\\IdeaProjects\\School\\Cryptography\\Signatures\\GOST for El-Gamal Signature\\Verificating\\s.txt");
                    BufferedReader readers=new BufferedReader(files);
                    //opening .zip file and selecting s file
                    String s;//initializing s
                    String lines=readers.readLine();
                    textArea.setText("");
                    while(lines!=null)
                    {
                        textArea.append(lines+"\n");
                        lines=readers.readLine();
                    }
                    s=textArea.getText();//string s takes textArea's value
                    s=s.substring(0,s.length()-1);//cutting last symbol, because text file fives last symbol as empty
                    System.out.println(s);
                    BigInteger S=new BigInteger(s);//giving string value of s to BigInteger S
                    files.close();//closing text file
                    readers.close();//closing reading text file
                    BigInteger u1=((S.mod(q)).multiply(InverseElement(hmp,q))).mod(q);//computing u1
                    BigInteger u2=(((R.negate()).mod(q)).multiply(InverseElement(hmp,q))).mod(q);//computing u2
                    BigInteger v=(((a.modPow(u1,p)).multiply(y.modPow(u2,p))).mod(p)).mod(q);//computing final paramter v
                    System.out.println("m="+m);
                    System.out.println("h="+h);
                    System.out.println("s="+s);
                    System.out.println("v="+v);
                    System.out.println("r="+R);
                    if(v.compareTo(R)==0)
                    {
                        message("Signature verificated!",false);//comparing v and r(R)
                    }
                    else
                    {
                        message("Signature is not verificated!",false);//comparing v and r(R)
                    }
                }
                catch(Exception e)
                {//catching exceptions
                }
                //close the file readers
                //inputBR.close();
                //inputReader.close();
                //message("File successfully read!",false);
            }catch(Exception ioe){
                message("Error reading file",true);
            }
        }
        else
        {
            message("No file chosen!",true);
        }
    }

    private void writeButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        int returnValue=saveFileChooser.showSaveDialog(this);
        if(returnValue==JFileChooser.APPROVE_OPTION)
        {
            try
            {
                File outputFile=saveFileChooser.getSelectedFile();
                PrintWriter outputPW=new PrintWriter(outputFile);
                outputPW.write(textArea.getText());
                outputPW.flush();
                outputPW.close();
                message("File successfully written!",false);
            }
            catch(IOException ioe){
                message("Error writing file!",true);
            }
        }else
        {
            message("No file chosen!",true);
        }
    }
    private void message(String msg,boolean isError)
    {
        if(isError)
        {
            messageLabel.setText(msg);
            messageLabel.setForeground(Color.red);
        }
        else
        {
            messageLabel.setText(msg);
            messageLabel.setForeground(Color.BLACK);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Verificating.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Verificating.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Verificating.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Verificating.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Verificating().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JButton readButton;
    private javax.swing.JTextArea textArea;
    private javax.swing.JButton writeButton;
    // End of variables declaration
    public void unZipIt(String zipFile, String outputFolder){

        byte[] buffer = new byte[1024];

        try{

            //create output directory is not exists
            File folder = new File(OUTPUT_FOLDER);
            if(!folder.exists()){
                folder.mkdir();
            }

            //get the zip file content
            ZipInputStream zis =
                    new ZipInputStream(new FileInputStream(zipFile));
            //get the zipped file list entry
            ZipEntry ze = zis.getNextEntry();

            while(ze!=null){

                String fileName = ze.getName();
                File newFile = new File(outputFolder + File.separator + fileName);

                System.out.println("file unzip : "+ newFile.getAbsoluteFile());

                //create all non exists folders
                //else you will hit FileNotFoundException for compressed folder
                new File(newFile.getParent()).mkdirs();

                FileOutputStream fos = new FileOutputStream(newFile);

                int len;
                while ((len = zis.read(buffer)) > 0) {
                    fos.write(buffer, 0, len);
                }
                fos.close();
                ze = zis.getNextEntry();
            }
            zis.closeEntry();
            zis.close();
            System.out.println("Done");
        }catch(IOException ex){
            ex.printStackTrace();
        }
    }
}
